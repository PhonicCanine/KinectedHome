console.log("It kinda doesn't not work")
var variable = "ayy lmao"
var Kinect2 = require('kinect2');
 
var kinect = new Kinect2();
 
var currentGestureDone = []

var currentBodyFrames

if(kinect.open()) {
    console.log("Kinect Opened");
    //listen for body frames
    kinect.on('bodyFrame', function(bodyFrame){
        //for(var i = 0;  i < bodyFrame.bodies.length; i++) {
            //if(bodyFrame.bodies[i].tracked) {
                //console.log(bodyFrame.bodies[i].joints[11]);
				currentBodyFrames = bodyFrame
            //}
        //}
		for(var i = 0;  i < bodyFrame.bodies.length; i++) {
            if(bodyFrame.bodies[i].tracked) {
                //console.log(bodyFrame.bodies[i].joints[11]);
				//console.log(bodyFrame.bodies[i].joints[11])
				//console.log("BODY IS TRACKED")
            }
        }
    });
	
	//currentBodyFrames = bodyFrame
	
    //request body frames
    kinect.openBodyReader();
 
    //close the kinect after 5 seconds
    setTimeout(function(){
        kinect.close();
        console.log("Kinect Closed");
    }, 50000);
}

setInterval(function(){
	console.log("1/2 Second")
	if (currentBodyFrames != undefined){
		if (currentGestureDone.length < 100){
			currentGestureDone.unshift(currentBodyFrames.bodies)
			//console.log("ADDED BODYFRAME")
				if (currentGestureDone.length == 9){
					console.log("10 frames recorded")
				}
			}else{
				currentGestureDone.pop()
				currentGestureDone.unshift(currentBodyFrames.bodies)
				checkForAllGestures([arrayOfSampleGesture,arrayOfSampleGestureTwo],currentGestureDone)
			}
		}
},30)

var arrayOfSampleData = [[ 1, 200.5416307157723 ],[ 0.21815945921357022, 287.81477687927867 ],[ 0.940040540777569, 359.8105751050056 ], [ 3.0460744309348895, 356.60539227150446 ],[ 3.3231099939300184, 344.67774841503615 ],[ 0.7113411859715907, 9.565221670453184 ],[ 0.6158155785764048, 180.59031867292808 ],[ 3.6314608729892766, 163.03414864821366 ],[ 2.9672546054885673, 178.97285392706675 ]];
var arrayOfSampleGesture = [[ 1, 128.66842975087064 ],
  [ 1.1915498319103233, 179.91299709463522 ],
  [ 1.4813978512207873, 219.5790892001874 ],
  [ 1.7537703649149978, 266.75946827395217 ],
  [ 1.3671189310962335, 242.12356058692615 ],
  [ 1.4620973026409816, 289.8903813624579 ],
  [ 0, 270 ],
  [ 1.6634630879678651, 257.7757539378575 ],
  [ 1.837136918944753, 357.4608474078503 ],
  [ 1.0973178742310137, 342.3392811955943 ],
  [ 0.9054122405663023, 335.20533964972475 ],
  [ 0.9226042719849464, 11.637248919789101 ],
  [ 0.7199510719273977, 13.1401351196223 ],
  [ 0.6206264570456965, 43.28720267270717 ],
  [ 0.45726618454760204, 333.58745836850886 ],
  [ 0.45574877647547635, 97.62346831476694 ],
  [ 0.118178699088161, 213.44267450580097 ],
  [ 0.4724369814613638, 241.81375559606712 ],
  [ 0.5914081240579719, 194.25777390589127 ],
  [ 0.947444752973687, 215.5497955178712 ],
  [ 0.8668378180637638, 150.2746240845654 ],
  [ 0.902682078243218, 172.68618672498081 ],
  [ 1.992357441822316, 201.69760703357545 ],
  [ 1.2052939142751509, 138.44692173343867 ],
  [ 1.2129047795108674, 95.05864089237585 ],
  [ 1.0344223945376347, 116.69451680385805 ],
  [ 1.1038828409964623, 106.52017037125285 ],
  [ 1.0786162020476906, 75.24570704399434 ],
  [ 0, 270 ],
  [ 1.1686274495011617, 76.84583981676906 ],
  [ 1.4645652201606674, 77.5339698695301 ],
  [ 1.5778061354426531, 5.354846851797731 ],
  [ 1.3332954412795421, 46.063168104195825 ],
  [ 0.9215178088865039, 356.22838715778545 ],
  [ 0.6992193221012687, 352.3513295810118 ],
  [ 0.2522662237184641, 353.51405464974243 ],
  [ 0.13258143744518203, 71.01360462049252 ],
  [ 0.18322283369896977, 199.5327668777058 ],
  [ 0.5291061305829042, 182.0966795470196 ],
  [ 1.2866579907345763, 135.40541961168068 ],
  [ 1.4685198380992446, 226.05099481802876 ],
  [ 1.328911308684511, 209.2089082954767 ],
  [ 1.385953402523004, 240.64124892571974 ],
  [ 1.3258927725863638, 263.4357321249392 ],
  [ 1.2608571424896668, 266.2308244240335 ],
  [ 1.2832596168566741, 281.78197709631945 ],
  [ 1.266368908089369, 285.04369549208513 ],
  [ 1.3388827053709598, 318.34033477531557 ],
  [ 1.4859310822412932, 351.77309677889843 ],
  [ 0, 270 ],
  [ 1.2172308862828076, 359.55869563852326 ],
  [ 0.9478508081418949, 4.08560067279393 ],
  [ 0.6604310439968477, 22.16910991810539 ],
  [ 0.5723213849822868, 11.1562143780734 ],
  [ 0.3845967145644924, 26.948486028361003 ],
  [ 0.17551674144524937, 17.6858876340566 ],
  [ 0.05628511155150649, 231.78487973852594 ],
  [ 0.2911776140404463, 221.7122831057955 ],
  [ 0.4540112403068638, 195.77088180673042 ],
  [ 0.6289408851652428, 186.74680068139884 ],
  [ 0.9860320362174279, 213.8844161324145 ],
  [ 1.0100606098217801, 159.42631275495694 ],
  [ 1.6735406193996276, 200.82235173378888 ],
  [ 1.1944182509413237, 144.49095938548527 ],
  [ 1.1070724906492881, 147.1913128236979 ],
  [ 1.1761566413503903, 87.85372431323219 ],
  [ 1.0797596835307333, 124.42298114449574 ],
  [ 1.07236001642618, 81.48403822535386 ],
  [ 0, 270 ],
  [ 1.1258477055407328, 69.66026947184042 ],
  [ 1.3903215762617331, 83.58135102622117 ],
  [ 1.463405459101855, 45.719484163313155 ],
  [ 1.370962955206569, 23.23625695847204 ],
  [ 0.943301159021318, 358.6834990702772 ],
  [ 0.7110776297394573, 12.149975512567494 ],
  [ 0.5068533444204416, 296.57754650414466 ],
  [ 0.00825177452584192, 127.46224603654755 ],
  [ 0.30715006833996866, 177.77370824951072 ],
  [ 0.8921725473665861, 115.00584432121252 ],
  [ 1.1693724417918727, 152.04373312246224 ],
  [ 1.4545448753915484, 224.61312459756482 ],
  [ 1.381006801034967, 208.95129891570832 ],
  [ 1.4481283942074876, 257.36080353440104 ],
  [ 1.4250534409170952, 275.51201403864326 ],
  [ 1.3039584314354464, 256.13140301773865 ],
  [ 1.3989439570104296, 303.9360419361736 ],
  [ 1.35031643732379, 314.9632268383054 ],
  [ 1.3938954792425593, 334.5978359488632 ],
  [ 1.2803086954703444, 355.25174675728357 ],
  [ 1.1010187234262772, 2.860585915937804 ],
  [ 0, 270 ],
  [ 0.9818065572494988, 28.868036556882373 ],
  [ 0.9263617041682755, 79.2314398067989 ],
  [ 0.7116105246506756, 27.286257672666352 ],
  [ 0.12746500688176582, 301.9148427954243 ],
  [ 0.7048957308956388, 312.40185001654754 ],
  [ 0.13253249564161695, 183.8666602754172 ],
  [ 0.35412365769001547, 162.13271541059135 ],
  [ 0.6334971934113278, 164.82420012968106 ]];
var arrayOfSampleGestureTwo = [ [ 1, 1.685889706825833 ],
  [ 1.7435757166588473, 334.35100156886386 ],
  [ 1.021170691039996, 40.123977298577074 ],
  [ 4.952898618828051, 110.28996002230625 ],
  [ 0.4651622191434094, 157.98452958992092 ],
  [ 0.31740888972332104, 342.57902426734034 ],
  [ 0.42374620019055703, 156.61952101786102 ],
  [ 0.48321607014430645, 339.597243941292 ],
  [ 0.09034046127239459, 300.40341098342185 ],
  [ 0.0013852913408500408, 319.7552491641254 ],
  [ 0.3389466949571532, 158.07469014823965 ],
  [ 0.024103483219991957, 319.56263669489397 ],
  [ 5.437936919308572, 308.8146247451518 ],
  [ 1.2011097397576702, 181.43839129935907 ],
  [ 0.4492963259835338, 214.80475947493795 ],
  [ 1.2429905643476233, 179.07867679032154 ],
  [ 1.6716905496409706, 172.59345900052494 ],
  [ 0.6536523849437118, 180.18746216572237 ],
  [ 0.3341058765324167, 227.128611013238 ],
  [ 0.19837251000486336, 255.37621737508488 ],
  [ 0.25789582461370275, 292.7760561141966 ],
  [ 0, 270 ],
  [ 0.1606306233902968, 309.15336371573903 ],
  [ 0.0714878438257247, 346.55181080645536 ],
  [ 0.3084951341074872, 4.461418786970171 ],
  [ 2.8185689126886886, 348.7417018172459 ],
  [ 0.8091549183852145, 15.665347450170827 ],
  [ 0.6470146472330047, 160.57692500513662 ],
  [ 2.2253141580545845, 1.5221087432810236 ],
  [ 2.4359782651752697, 359.75330605167176 ],
  [ 2.1062437183034795, 5.068611389471812 ],
  [ 6.034268063964944, 119.10999336324792 ],
  [ 0.106851465567473, 222.57463282648598 ],
  [ 0.07735425115667129, 222.477622473006 ],
  [ 5.08409195622512, 287.24019868212713 ],
  [ 2.652087035959979, 0.5509109123256621 ],
  [ 1.5521755071016634, 185.15457626772053 ],
  [ 0.8165935207844901, 194.4769686211644 ],
  [ 1.9549694222218557, 178.388969977899 ],
  [ 1.1399963910177935, 274.00869455303905 ],
  [ 5.961640312429216, 164.608227855421 ],
  [ 0.07872086003957954, 225.11931416490907 ],
  [ 0.7465736494308397, 176.18992951381142 ],
  [ 0.4248325156363627, 169.30994566538044 ],
  [ 0.2852147275743399, 194.19297062233045 ],
  [ 0.214875279547983, 185.34497814323157 ],
  [ 0.11314674123769593, 294.3902809666391 ],
  [ 0.14736969279060838, 313.1200184602923 ],
  [ 0.29553897162173154, 335.6019111714835 ],
  [ 0.4511666371188219, 353.1610496892764 ],
  [ 0.5553637544365373, 354.042748078755 ],
  [ 1.669151355044508, 347.39229265254636 ],
  [ 0.7027935408206296, 4.379683944198632 ],
  [ 0, 270 ],
  [ 1.8818942325740862, 357.2083344582004 ],
  [ 1.9066562615273246, 0.9967535049484013 ],
  [ 1.322802569414814, 3.8082034139096663 ],
  [ 1.0668757476260988, 3.7882322820063905 ],
  [ 0, 270 ],
  [ 1.162954362376289, 187.32960577519208 ],
  [ 1.3658732968108285, 185.70113086012384 ],
  [ 0.49648538153304644, 123.28227474165371 ],
  [ 1.378618884161705, 178.00060324197173 ],
  [ 1.8117396832436827, 177.02734838307242 ],
  [ 1.2589307875662488, 176.92543130244053 ],
  [ 0.29775577055121427, 252.69890797799417 ],
  [ 1.7874823886433684, 174.00639234034054 ],
  [ 0.2638769681107736, 204.0583660104445 ],
  [ 0.20596631380359462, 226.99534291721238 ],
  [ 0.17643488269613697, 219.2207745134291 ],
  [ 0.0963256242678668, 262.56108404891967 ],
  [ 0.11422116640699992, 329.50990339345384 ],
  [ 0.055435133032001496, 343.08704521057496 ],
  [ 1.6068309979408972, 347.74387193489497 ],
  [ 1.0449876000829474, 355.8958484205177 ],
  [ 0.16290176651916172, 77.92634066385972 ],
  [ 1.4264148237742482, 357.404677705772 ],
  [ 1.8182060169645162, 359.0908850654693 ],
  [ 2.256397424296317, 3.2873520941020615 ],
  [ 1.5363901459890419, 0.2541439087615345 ],
  [ 1.7318988146628254, 2.1890250745866524 ],
  [ 0.20934317393783466, 82.26110299416507 ],
  [ 0.03843845975756976, 159.6670078772966 ],
  [ 0, 270 ],
  [ 0.15956557883654454, 175.52595129936037 ],
  [ 0.799978683174966, 192.68183741617224 ],
  [ 3.0764659555998897, 181.7140582367044 ],
  [ 0.5049961251230533, 144.8771055469846 ],
  [ 1.8584306813511808, 178.5722443078889 ],
  [ 1.7576789244904911, 181.48827712429045 ],
  [ 1.5075541024263297, 173.52703596737157 ],
  [ 0.5780091463479731, 176.73576438637352 ],
  [ 0.7584616005929085, 189.61256798317308 ],
  [ 0.1176927602812246, 234.4379134827056 ],
  [ 0.0757814660253268, 307.95755688156703 ],
  [ 0.08262450589734567, 236.23924449282976 ],
  [ 0.14584675406694328, 300.56740950415985 ],
  [ 0.18506334362415894, 349.2687900091399 ],
  [ 0.05131182892614682, 161.82350327240303 ] ]

function checkGesture(liveData, toCompareTo){
	
	firstdistance = returnDistanceBetweenPoints(liveData[0],liveData[1])
	
	var consecutiveMatches = 0
	
	var shortestLength = 0
	if (liveData.length < toCompareTo.length){
		shortestLength = liveData.length
	}else{
		shortestLength = toCompareTo.length
	}
	
	for (var i = 0; i<shortestLength-1; i++) {

		var d = returnDistanceBetweenPoints(liveData[i], liveData[i+1])
		if (d != null){
			var dAsPercentage = d/firstdistance
			var angle = (270 - returnAngleBetweenPoints(liveData[i], liveData[i+1])) % 360
			//console.log((270 - angle) % 360)
		
			if (((dAsPercentage - toCompareTo[i][0]) < 2 && (dAsPercentage - toCompareTo[i][0]) > -2) && ((angle - toCompareTo[i][1]) < 50 && (angle - toCompareTo[i][1]) > -50)) {
				//console.log("lol we have a match ayy lmao")
				consecutiveMatches ++
				//if (consecutiveMatches >= toCompareTo.length * 0.4){
					//console.log("GESTURE MATCHED")
					//return true
				//}
			}else{
				//console.log("Nah yeah nah",toCompareTo[i],[dAsPercentage,angle])
				//consecutiveMatches = 0
			}
		}
	}
	//console.log(liveData)
	return consecutiveMatches / toCompareTo.length
	
}

function returnAngleBetweenPoints(p1,p2){
	return Math.atan2(p2[1] - p1[1], p2[0] - p1[0]) * 180 / Math.PI;
}

function returnDistanceBetweenPoints(p1,p2){
	if (p1 != undefined && p2 != undefined){
		var x1 = p1[0]
		var y1 = p1[1]
	
		var x2 = p2[0]
		var y2 = p2[1]
	
		var d1 = Math.abs(x1-x2)
		var d2 = Math.abs(y1-y2)
	
		return Math.sqrt(Math.pow(d1,2) + Math.pow(d2,2))
	}else{
		return null
	}
}

var lastLastGesturePerc = 0.0
var lastGesturePerc = 0.0
var consecutivePasses = 0

function checkForAllGestures(gestures,currentGestureInfo){
	console.log(consecutivePasses)
	var arrayOfRightHandLocations = [[],[],[],[],[],[]]
	for (var i = 0; i < currentGestureInfo.length; i++){
		//console.log("IN FUNCTION")
		for (var body = 0; body < currentGestureInfo[i].length; body++){
			//console.log("LOOPING THROUGH BODIES")
			if (currentGestureInfo[i][body].tracked == true){
				arrayOfRightHandLocations[body].push([currentGestureInfo[i][body].joints[11].depthX,currentGestureInfo[i][body].joints[11].depthY])
				//console.log("APPENDED")
			}
		}
	}
	for (var i = 0; i < arrayOfRightHandLocations.length; i++){
		//console.log("GOT TO HERE")
		for (var x = 0; x < gestures.length; x++){
			var gestureMatchPerc = checkGesture(arrayOfRightHandLocations[i],gestures[x])
			
			if (gestureMatchPerc > 0){
				if (gestureMatchPerc > 0.3){
					consecutivePasses += 2
				}else{
					if (consecutivePasses > 0){
						consecutivePasses -= 1
					}
				}
			}
			
			if (consecutivePasses >= 7/*gestureMatchPerc > 0.4 || (gestureMatchPerc > 0.25 && (lastGesturePerc > 0.25 || lastLastGesturePerc > 0.25))*/){
				console.log("A GESTURE WAS DETECTED! I CAN'T BELIEVE SOMETHING _ACTUALLY_ WORKED!!!!!!!!!!!!!")
				console.log(x)
				var nullVar = null
				console.log(nullVar[9])
			}
			if (gestureMatchPerc > 0.0){
				lastLastGesturePerc = lastGesturePerc
				lastGesturePerc = gestureMatchPerc
			}
			console.log(gestureMatchPerc,lastGesturePerc,lastLastGesturePerc)
		}
	}
	//console.log("This function completed? How? It is like O(N^3)")
}
//var distance =
checkGesture(arrayOfSampleData, arrayOfSampleGesture)